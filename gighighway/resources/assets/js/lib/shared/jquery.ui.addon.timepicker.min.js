/*
 * jQuery timepicker addon
 * By: Trent Richardson [http://trentrichardson.com]
 * Version 1.0.5
 * Last Modified: 10/06/2012
 *
 * Copyright 2012 Trent Richardson
 * You may use this project under MIT or GPL licenses.
 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
 */
(function (d) { d.ui.timepicker = d.ui.timepicker || {}; if (d.ui.timepicker.version) { return } d.extend(d.ui, { timepicker: { version: "1.0.5" } }); function y() { this.regional = []; this.regional[''] = { currentText: 'Now', closeText: 'Done', ampm: false, amNames: ['AM', 'A'], pmNames: ['PM', 'P'], timeFormat: 'hh:mm tt', timeSuffix: '', timeOnlyTitle: 'Choose Time', timeText: 'Time', hourText: 'Hour', minuteText: 'Minute', secondText: 'Second', millisecText: 'Millisecond', timezoneText: 'Time Zone', isRTL: false }; this._defaults = { showButtonPanel: true, timeOnly: false, showHour: true, showMinute: true, showSecond: false, showMillisec: false, showTimezone: false, showTime: true, stepHour: 1, stepMinute: 1, stepSecond: 1, stepMillisec: 1, hour: 0, minute: 0, second: 0, millisec: 0, timezone: null, useLocalTimezone: false, defaultTimezone: "+0000", hourMin: 0, minuteMin: 0, secondMin: 0, millisecMin: 0, hourMax: 23, minuteMax: 59, secondMax: 59, millisecMax: 999, minDateTime: null, maxDateTime: null, onSelect: null, hourGrid: 0, minuteGrid: 0, secondGrid: 0, millisecGrid: 0, alwaysSetTime: true, separator: ' ', altFieldTimeOnly: true, altSeparator: null, altTimeSuffix: null, showTimepicker: true, timezoneIso8601: false, timezoneList: null, addSliderAccess: false, sliderAccessArgs: null, controlType: 'slider', defaultValue: null }; d.extend(this._defaults, this.regional['']) } d.extend(y.prototype, { $input: null, $altInput: null, $timeObj: null, inst: null, hour_slider: null, minute_slider: null, second_slider: null, millisec_slider: null, timezone_select: null, hour: 0, minute: 0, second: 0, millisec: 0, timezone: null, defaultTimezone: "+0000", hourMinOriginal: null, minuteMinOriginal: null, secondMinOriginal: null, millisecMinOriginal: null, hourMaxOriginal: null, minuteMaxOriginal: null, secondMaxOriginal: null, millisecMaxOriginal: null, ampm: '', formattedDate: '', formattedTime: '', formattedDateTime: '', timezoneList: null, units: ['hour', 'minute', 'second', 'millisec'], control: null, setDefaults: function (b) { z(this._defaults, b || {}); return this }, _newInst: function (f, g) { var e = new y(), h = {}, m = {}, i, l; for (var j in this._defaults) { if (this._defaults.hasOwnProperty(j)) { var k = f.attr('time:' + j); if (k) { try { h[j] = eval(k) } catch (err) { h[j] = k } } } } i = { beforeShow: function (b, a) { if (d.isFunction(e._defaults.evnts.beforeShow)) { return e._defaults.evnts.beforeShow.call(f[0], b, a, e) } }, onChangeMonthYear: function (b, a, c) { e._updateDateTime(c); if (d.isFunction(e._defaults.evnts.onChangeMonthYear)) { e._defaults.evnts.onChangeMonthYear.call(f[0], b, a, c, e) } }, onClose: function (b, a) { if (e.timeDefined === true && f.val() !== '') { e._updateDateTime(a) } if (d.isFunction(e._defaults.evnts.onClose)) { e._defaults.evnts.onClose.call(f[0], b, a, e) } } }; for (l in i) { if (i.hasOwnProperty(l)) { m[l] = g[l] || null } } e._defaults = d.extend({}, this._defaults, h, g, i, { evnts: m, timepicker: e }); e.amNames = d.map(e._defaults.amNames, function (b) { return b.toUpperCase() }); e.pmNames = d.map(e._defaults.pmNames, function (b) { return b.toUpperCase() }); if (typeof (e._defaults.controlType) === 'string') { if (e._defaults.controlType == 'slider' && d.fn.slider === undefined) { e._defaults.controlType = 'select' } e.control = e._controls[e._defaults.controlType] } else { e.control = e._defaults.controlType } if (e._defaults.timezoneList === null) { var p = ['-1200', '-1100', '-1000', '-0930', '-0900', '-0800', '-0700', '-0600', '-0500', '-0430', '-0400', '-0330', '-0300', '-0200', '-0100', '+0000', '+0100', '+0200', '+0300', '+0330', '+0400', '+0430', '+0500', '+0530', '+0545', '+0600', '+0630', '+0700', '+0800', '+0845', '+0900', '+0930', '+1000', '+1030', '+1100', '+1130', '+1200', '+1245', '+1300', '+1400']; if (e._defaults.timezoneIso8601) { p = d.map(p, function (b) { return b == '+0000' ? 'Z' : (b.substring(0, 3) + ':' + b.substring(3)) }) } e._defaults.timezoneList = p } e.timezone = e._defaults.timezone; e.hour = e._defaults.hour; e.minute = e._defaults.minute; e.second = e._defaults.second; e.millisec = e._defaults.millisec; e.ampm = ''; e.$input = f; if (g.altField) { e.$altInput = d(g.altField).css({ cursor: 'pointer' }).focus(function () { f.trigger("focus") }) } if (e._defaults.minDate === 0 || e._defaults.minDateTime === 0) { e._defaults.minDate = new Date() } if (e._defaults.maxDate === 0 || e._defaults.maxDateTime === 0) { e._defaults.maxDate = new Date() } if (e._defaults.minDate !== undefined && e._defaults.minDate instanceof Date) { e._defaults.minDateTime = new Date(e._defaults.minDate.getTime()) } if (e._defaults.minDateTime !== undefined && e._defaults.minDateTime instanceof Date) { e._defaults.minDate = new Date(e._defaults.minDateTime.getTime()) } if (e._defaults.maxDate !== undefined && e._defaults.maxDate instanceof Date) { e._defaults.maxDateTime = new Date(e._defaults.maxDate.getTime()) } if (e._defaults.maxDateTime !== undefined && e._defaults.maxDateTime instanceof Date) { e._defaults.maxDate = new Date(e._defaults.maxDateTime.getTime()) } e.$input.bind('focus', function () { e._onFocus() }); return e }, _addTimePicker: function (b) { var a = (this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val(); this.timeDefined = this._parseTime(a); this._limitMinMaxDateTime(b, false); this._injectTimePicker() }, _parseTime: function (b, a) { if (!this.inst) { this.inst = d.datepicker._getInst(this.$input[0]) } if (a || !this._defaults.timeOnly) { var c = d.datepicker._get(this.inst, 'dateFormat'); try { var f = C(c, this._defaults.timeFormat, b, d.datepicker._getFormatConfig(this.inst), this._defaults); if (!f.timeObj) { return false } d.extend(this, f.timeObj) } catch (err) { return false } return true } else { var g = d.datepicker.parseTime(this._defaults.timeFormat, b, this._defaults); if (!g) { return false } d.extend(this, g); return true } }, _injectTimePicker: function () { var m = this.inst.dpDiv, i = this.inst.settings, l = this, j = '', k = '', p = {}, n = {}, q = null; if (m.find("div.ui-timepicker-div").length === 0 && i.showTimepicker) { var o = ' style="display:none;"', s = '<div class="ui-timepicker-div' + (i.isRTL ? ' ui-timepicker-rtl' : '') + '"><dl><dt class="ui_tpicker_time_label"' + ((i.showTime) ? '' : o) + '>' + i.timeText + '</dt><dd class="ui_tpicker_time"' + ((i.showTime) ? '' : o) + '></dd>'; for (var t = 0, A = this.units.length; t < A; t++) { j = this.units[t]; k = j.substr(0, 1).toUpperCase() + j.substr(1); p[j] = parseInt((i[j + 'Max'] - ((i[j + 'Max'] - i[j + 'Min']) % i['step' + k])), 10); n[j] = 0; s += '<dt class="ui_tpicker_' + j + '_label"' + ((i['show' + k]) ? '' : o) + '>' + i[j + 'Text'] + '</dt><dd class="ui_tpicker_' + j + '"><div class="ui_tpicker_' + j + '_slider"' + ((i['show' + k]) ? '' : o) + '></div>'; if (i['show' + k] && i[j + 'Grid'] > 0) { s += '<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>'; if (j == 'hour') { for (var u = i[j + 'Min']; u <= p[j]; u += parseInt(i[j + 'Grid'], 10)) { n[j]++; var v = (i.ampm && u > 12) ? u - 12 : u; if (v < 10) { v = '0' + v } if (i.ampm) { if (u === 0) { v = 12 + 'a' } else { if (u < 12) { v += 'a' } else { v += 'p' } } } s += '<td data-for="' + j + '">' + v + '</td>' } } else { for (var w = i[j + 'Min']; w <= p[j]; w += parseInt(i[j + 'Grid'], 10)) { n[j]++; s += '<td data-for="' + j + '">' + ((w < 10) ? '0' : '') + w + '</td>' } } s += '</tr></table></div>' } s += '</dd>' } s += '<dt class="ui_tpicker_timezone_label"' + ((i.showTimezone) ? '' : o) + '>' + i.timezoneText + '</dt>'; s += '<dd class="ui_tpicker_timezone" ' + ((i.showTimezone) ? '' : o) + '></dd>'; s += '</dl></div>'; var r = d(s); if (i.timeOnly === true) { r.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all"><div class="ui-datepicker-title">' + i.timeOnlyTitle + '</div></div>'); m.find('.ui-datepicker-header, .ui-datepicker-calendar').hide() } for (var t = 0, A = l.units.length; t < A; t++) { j = l.units[t]; k = j.substr(0, 1).toUpperCase() + j.substr(1); l[j + '_slider'] = l.control.create(l, r.find('.ui_tpicker_' + j + '_slider'), j, l[j], i[j + 'Min'], p[j], i['step' + k]); if (i['show' + k] && i[j + 'Grid'] > 0) { q = 100 * n[j] * i[j + 'Grid'] / (p[j] - i[j + 'Min']); r.find('.ui_tpicker_' + j + ' table').css({ width: q + "%", marginLeft: i.isRTL ? '0' : ((q / (-2 * n[j])) + "%"), marginRight: i.isRTL ? ((q / (-2 * n[j])) + "%") : '0', borderCollapse: 'collapse' }).find("td").click(function (b) { var a = d(this), c = a.html(), f = a.data('for'); if (f == 'hour' && i.ampm) { var g = c.substring(2).toLowerCase(), e = parseInt(c.substring(0, 2), 10); if (g == 'a') { if (e == 12) { c = 0 } else { c = e } } else if (e == 12) { c = 12 } else { c = e + 12 } } l.control.value(l, l[f + '_slider'], parseInt(c, 10)); l._onTimeChange(); l._onSelectHandler() }).css({ cursor: 'pointer', width: (100 / n[j]) + '%', textAlign: 'center', overflow: 'hidden' }) } } this.timezone_select = r.find('.ui_tpicker_timezone').append('<select></select>').find("select"); d.fn.append.apply(this.timezone_select, d.map(i.timezoneList, function (b, a) { return d("<option />").val(typeof b == "object" ? b.value : b).text(typeof b == "object" ? b.label : b) })); if (typeof (this.timezone) != "undefined" && this.timezone !== null && this.timezone !== "") { var F = new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12); var G = d.timepicker.timeZoneOffsetString(F); if (G == this.timezone) { x(l) } else { this.timezone_select.val(this.timezone) } } else { if (typeof (this.hour) != "undefined" && this.hour !== null && this.hour !== "") { this.timezone_select.val(i.defaultTimezone) } else { x(l) } } this.timezone_select.change(function () { l._defaults.useLocalTimezone = false; l._onTimeChange() }); var D = m.find('.ui-datepicker-buttonpane'); if (D.length) { D.before(r) } else { m.append(r) } this.$timeObj = r.find('.ui_tpicker_time'); if (this.inst !== null) { var H = this.timeDefined; this._onTimeChange(); this.timeDefined = H } if (this._defaults.addSliderAccess) { var E = this._defaults.sliderAccessArgs, B = this._defaults.isRTL; E.isRTL = B; setTimeout(function () { if (r.find('.ui-slider-access').length === 0) { r.find('.ui-slider:visible').sliderAccess(E); var h = r.find('.ui-slider-access:eq(0)').outerWidth(true); if (h) { r.find('table:visible').each(function () { var b = d(this), a = b.outerWidth(), c = b.css(B ? 'marginRight' : 'marginLeft').toString().replace('%', ''), f = a - h, g = ((c * f) / a) + '%', e = { width: f, marginRight: 0, marginLeft: 0 }; e[B ? 'marginRight' : 'marginLeft'] = g; b.css(e) }) } } }, 10) } } }, _limitMinMaxDateTime: function (b, a) { var c = this._defaults, f = new Date(b.selectedYear, b.selectedMonth, b.selectedDay); if (!this._defaults.showTimepicker) { return } if (d.datepicker._get(b, 'minDateTime') !== null && d.datepicker._get(b, 'minDateTime') !== undefined && f) { var g = d.datepicker._get(b, 'minDateTime'), e = new Date(g.getFullYear(), g.getMonth(), g.getDate(), 0, 0, 0, 0); if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null) { this.hourMinOriginal = c.hourMin; this.minuteMinOriginal = c.minuteMin; this.secondMinOriginal = c.secondMin; this.millisecMinOriginal = c.millisecMin } if (b.settings.timeOnly || e.getTime() == f.getTime()) { this._defaults.hourMin = g.getHours(); if (this.hour <= this._defaults.hourMin) { this.hour = this._defaults.hourMin; this._defaults.minuteMin = g.getMinutes(); if (this.minute <= this._defaults.minuteMin) { this.minute = this._defaults.minuteMin; this._defaults.secondMin = g.getSeconds(); if (this.second <= this._defaults.secondMin) { this.second = this._defaults.secondMin; this._defaults.millisecMin = g.getMilliseconds() } else { if (this.millisec < this._defaults.millisecMin) { this.millisec = this._defaults.millisecMin } this._defaults.millisecMin = this.millisecMinOriginal } } else { this._defaults.secondMin = this.secondMinOriginal; this._defaults.millisecMin = this.millisecMinOriginal } } else { this._defaults.minuteMin = this.minuteMinOriginal; this._defaults.secondMin = this.secondMinOriginal; this._defaults.millisecMin = this.millisecMinOriginal } } else { this._defaults.hourMin = this.hourMinOriginal; this._defaults.minuteMin = this.minuteMinOriginal; this._defaults.secondMin = this.secondMinOriginal; this._defaults.millisecMin = this.millisecMinOriginal } } if (d.datepicker._get(b, 'maxDateTime') !== null && d.datepicker._get(b, 'maxDateTime') !== undefined && f) { var h = d.datepicker._get(b, 'maxDateTime'), m = new Date(h.getFullYear(), h.getMonth(), h.getDate(), 0, 0, 0, 0); if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null) { this.hourMaxOriginal = c.hourMax; this.minuteMaxOriginal = c.minuteMax; this.secondMaxOriginal = c.secondMax; this.millisecMaxOriginal = c.millisecMax } if (b.settings.timeOnly || m.getTime() == f.getTime()) { this._defaults.hourMax = h.getHours(); if (this.hour >= this._defaults.hourMax) { this.hour = this._defaults.hourMax; this._defaults.minuteMax = h.getMinutes(); if (this.minute >= this._defaults.minuteMax) { this.minute = this._defaults.minuteMax; this._defaults.secondMax = h.getSeconds() } else if (this.second >= this._defaults.secondMax) { this.second = this._defaults.secondMax; this._defaults.millisecMax = h.getMilliseconds() } else { if (this.millisec > this._defaults.millisecMax) { this.millisec = this._defaults.millisecMax } this._defaults.millisecMax = this.millisecMaxOriginal } } else { this._defaults.minuteMax = this.minuteMaxOriginal; this._defaults.secondMax = this.secondMaxOriginal; this._defaults.millisecMax = this.millisecMaxOriginal } } else { this._defaults.hourMax = this.hourMaxOriginal; this._defaults.minuteMax = this.minuteMaxOriginal; this._defaults.secondMax = this.secondMaxOriginal; this._defaults.millisecMax = this.millisecMaxOriginal } } if (a !== undefined && a === true) { var i = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10), l = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10), j = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10), k = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10); if (this.hour_slider) { this.control.options(this, this.hour_slider, { min: this._defaults.hourMin, max: i }); this.control.value(this, this.hour_slider, this.hour) } if (this.minute_slider) { this.control.options(this, this.minute_slider, { min: this._defaults.minuteMin, max: l }); this.control.value(this, this.minute_slider, this.minute) } if (this.second_slider) { this.control.options(this, this.second_slider, { min: this._defaults.secondMin, max: j }); this.control.value(this, this.second_slider, this.second) } if (this.millisec_slider) { this.control.options(this, this.millisec_slider, { min: this._defaults.millisecMin, max: k }); this.control.value(this, this.millisec_slider, this.millisec) } } }, _onTimeChange: function () { var b = (this.hour_slider) ? this.control.value(this, this.hour_slider) : false, a = (this.minute_slider) ? this.control.value(this, this.minute_slider) : false, c = (this.second_slider) ? this.control.value(this, this.second_slider) : false, f = (this.millisec_slider) ? this.control.value(this, this.millisec_slider) : false, g = (this.timezone_select) ? this.timezone_select.val() : false, e = this._defaults; if (typeof (b) == 'object') { b = false } if (typeof (a) == 'object') { a = false } if (typeof (c) == 'object') { c = false } if (typeof (f) == 'object') { f = false } if (typeof (g) == 'object') { g = false } if (b !== false) { b = parseInt(b, 10) } if (a !== false) { a = parseInt(a, 10) } if (c !== false) { c = parseInt(c, 10) } if (f !== false) { f = parseInt(f, 10) } var h = e[b < 12 ? 'amNames' : 'pmNames'][0]; var m = (b != this.hour || a != this.minute || c != this.second || f != this.millisec || (this.ampm.length > 0 && (b < 12) != (d.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) || ((this.timezone === null && g != this.defaultTimezone) || (this.timezone !== null && g != this.timezone))); if (m) { if (b !== false) { this.hour = b } if (a !== false) { this.minute = a } if (c !== false) { this.second = c } if (f !== false) { this.millisec = f } if (g !== false) { this.timezone = g } if (!this.inst) { this.inst = d.datepicker._getInst(this.$input[0]) } this._limitMinMaxDateTime(this.inst, true) } if (e.ampm) { this.ampm = h } this.formattedTime = d.datepicker.formatTime(this._defaults.timeFormat, this, this._defaults); if (this.$timeObj) { this.$timeObj.text(this.formattedTime + e.timeSuffix) } this.timeDefined = true; if (m) { this._updateDateTime() } }, _onSelectHandler: function () { var b = this._defaults.onSelect || this.inst.settings.onSelect; var a = this.$input ? this.$input[0] : null; if (b && a) { b.apply(a, [this.formattedDateTime, this]) } }, _updateDateTime: function (b) { b = this.inst || b; var a = d.datepicker._daylightSavingAdjust(new Date(b.selectedYear, b.selectedMonth, b.selectedDay)), c = d.datepicker._get(b, 'dateFormat'), f = d.datepicker._getFormatConfig(b), g = a !== null && this.timeDefined; this.formattedDate = d.datepicker.formatDate(c, (a === null ? new Date() : a), f); var e = this.formattedDate; if (this._defaults.timeOnly === true) { e = this.formattedTime } else if (this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || g)) { e += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix } this.formattedDateTime = e; if (!this._defaults.showTimepicker) { this.$input.val(this.formattedDate) } else if (this.$altInput && this._defaults.altFieldTimeOnly === true) { this.$altInput.val(this.formattedTime); this.$input.val(this.formattedDate) } else if (this.$altInput) { this.$input.val(e); var h = '', m = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator, i = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix; if (this._defaults.altFormat) h = d.datepicker.formatDate(this._defaults.altFormat, (a === null ? new Date() : a), f); else h = this.formattedDate; if (h) h += m; if (this._defaults.altTimeFormat) h += d.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + i; else h += this.formattedTime + i; this.$altInput.val(h) } else { this.$input.val(e) } this.$input.trigger("change") }, _onFocus: function () { if (!this.$input.val() && this._defaults.defaultValue) { this.$input.val(this._defaults.defaultValue); var b = d.datepicker._getInst(this.$input.get(0)), a = d.datepicker._get(b, 'timepicker'); if (a) { if (a._defaults.timeOnly && (b.input.val() != b.lastVal)) { try { d.datepicker._updateDatepicker(b) } catch (err) { d.datepicker.log(err) } } } } }, _controls: { slider: { create: function (c, f, g, e, h, m, i) { var l = c._defaults.isRTL; return f.prop('slide', null).slider({ orientation: "horizontal", value: l ? e * -1 : e, min: l ? m * -1 : h, max: l ? h * -1 : m, step: i, slide: function (b, a) { c.control.value(c, d(this), l ? a.value * -1 : a.value); c._onTimeChange() }, stop: function (b, a) { c._onSelectHandler() } }) }, options: function (b, a, c, f) { if (b._defaults.isRTL) { if (typeof (c) == 'string') { if (c == 'min' || c == 'max') { if (f !== undefined) return a.slider(c, f * -1); return Math.abs(a.slider(c)) } return a.slider(c) } var g = c.min, e = c.max; c.min = c.max = null; if (g !== undefined) c.max = g * -1; if (e !== undefined) c.min = e * -1; return a.slider(c) } if (typeof (c) == 'string' && f !== undefined) return a.slider(c, f); return a.slider(c) }, value: function (b, a, c) { if (b._defaults.isRTL) { if (c !== undefined) return a.slider('value', c * -1); return Math.abs(a.slider('value')) } if (c !== undefined) return a.slider('value', c); return a.slider('value') } }, select: { create: function (a, c, f, g, e, h, m) { var i = '<select class="ui-timepicker-select" data-unit="' + f + '" data-min="' + e + '" data-max="' + h + '" data-step="' + m + '">', l = a._defaults.timeFormat.indexOf('t') !== -1 ? 'toLowerCase' : 'toUpperCase', j = 0; for (var k = e; k <= h; k += m) { i += '<option value="' + k + '"' + (k == g ? ' selected' : '') + '>'; if (f == 'hour' && a._defaults.ampm) { j = k % 12; if (k === 0 || k === 12) i += '12'; else if (j < 10) i += '0' + j.toString(); else i += j; i += ' ' + ((k < 12) ? a._defaults.amNames[0] : a._defaults.pmNames[0])[l]() } else if (f == 'millisec' || k >= 10) i += k; else i += '0' + k.toString(); i += '</option>' } i += '</select>'; c.children('select').remove(); d(i).appendTo(c).change(function (b) { a._onTimeChange(); a._onSelectHandler() }); return c }, options: function (b, a, c, f) { var g = {}, e = a.children('select'); if (typeof (c) == 'string') { if (f === undefined) return e.data(c); g[c] = f } else g = c; return b.control.create(b, a, e.data('unit'), e.val(), g.min || e.data('min'), g.max || e.data('max'), g.step || e.data('step')) }, value: function (b, a, c) { var f = a.children('select'); if (c !== undefined) return f.val(c); return f.val() } } } }); d.fn.extend({ timepicker: function (b) { b = b || {}; var a = Array.prototype.slice.call(arguments); if (typeof b == 'object') { a[0] = d.extend(b, { timeOnly: true }) } return d(this).each(function () { d.fn.datetimepicker.apply(d(this), a) }) }, datetimepicker: function (a) { a = a || {}; var c = arguments; if (typeof (a) == 'string') { if (a == 'getDate') { return d.fn.datepicker.apply(d(this[0]), c) } else { return this.each(function () { var b = d(this); b.datepicker.apply(b, c) }) } } else { return this.each(function () { var b = d(this); b.datepicker(d.timepicker._newInst(b, a)._defaults) }) } } }); d.datepicker.parseDateTime = function (b, a, c, f, g) { var e = C(b, a, c, f, g); if (e.timeObj) { var h = e.timeObj; e.date.setHours(h.hour, h.minute, h.second, h.millisec) } return e.date }; d.datepicker.parseTime = function (g, e, h) { var m = function (a, c) { var f = []; if (a) { d.merge(f, a) } if (c) { d.merge(f, c) } f = d.map(f, function (b) { return b.replace(/[.*+?|()\[\]{}\\]/g, '\\$&') }); return '(' + f.join('|') + ')?' }; var i = function (b) { var a = b.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|t{1,2}|z|'.*?')/g), c = { h: -1, m: -1, s: -1, l: -1, t: -1, z: -1 }; if (a) { for (var f = 0; f < a.length; f++) { if (c[a[f].toString().charAt(0)] == -1) { c[a[f].toString().charAt(0)] = f + 1 } } } return c }; var l = z(z({}, d.timepicker._defaults), h || {}); var j = '^' + g.toString().replace(/(hh?|mm?|ss?|[tT]{1,2}|[lz]|'.*?')/g, function (a) { switch (a.charAt(0).toLowerCase()) { case 'h': return '(\\d?\\d)'; case 'm': return '(\\d?\\d)'; case 's': return '(\\d?\\d)'; case 'l': return '(\\d?\\d?\\d)'; case 'z': return '(z|[-+]\\d\\d:?\\d\\d|\\S+)?'; case 't': return m(l.amNames, l.pmNames); default: return '(' + a.replace(/\'/g, "").replace(/(\.|\$|\^|\\|\/|\(|\)|\[|\]|\?|\+|\*)/g, function (b) { return "\\" + b }) + ')?' } }).replace(/\s/g, '\\s?') + l.timeSuffix + '$', k = i(g), p = '', n; n = e.match(new RegExp(j, 'i')); var q = { hour: 0, minute: 0, second: 0, millisec: 0 }; if (n) { if (k.t !== -1) { if (n[k.t] === undefined || n[k.t].length === 0) { p = ''; q.ampm = '' } else { p = d.inArray(n[k.t].toUpperCase(), l.amNames) !== -1 ? 'AM' : 'PM'; q.ampm = l[p == 'AM' ? 'amNames' : 'pmNames'][0] } } if (k.h !== -1) { if (p == 'AM' && n[k.h] == '12') { q.hour = 0 } else { if (p == 'PM' && n[k.h] != '12') { q.hour = parseInt(n[k.h], 10) + 12 } else { q.hour = Number(n[k.h]) } } } if (k.m !== -1) { q.minute = Number(n[k.m]) } if (k.s !== -1) { q.second = Number(n[k.s]) } if (k.l !== -1) { q.millisec = Number(n[k.l]) } if (k.z !== -1 && n[k.z] !== undefined) { var o = n[k.z].toUpperCase(); switch (o.length) { case 1: o = l.timezoneIso8601 ? 'Z' : '+0000'; break; case 5: if (l.timezoneIso8601) { o = o.substring(1) == '0000' ? 'Z' : o.substring(0, 3) + ':' + o.substring(3) } break; case 6: if (!l.timezoneIso8601) { o = o == 'Z' || o.substring(1) == '00:00' ? '+0000' : o.replace(/:/, '') } else { if (o.substring(1) == '00:00') { o = 'Z' } } break } q.timezone = o } return q } return false }; d.datepicker.formatTime = function (a, c, f) { f = f || {}; f = d.extend({}, d.timepicker._defaults, f); c = d.extend({ hour: 0, minute: 0, second: 0, millisec: 0, timezone: '+0000' }, c); var g = a; var e = f.amNames[0]; var h = parseInt(c.hour, 10); if (f.ampm) { if (h > 11) { e = f.pmNames[0]; if (h > 12) { h = h % 12 } } if (h === 0) { h = 12 } } g = g.replace(/(?:hh?|mm?|ss?|[tT]{1,2}|[lz]|'.*?')/g, function (b) { switch (b.toLowerCase()) { case 'hh': return ('0' + h).slice(-2); case 'h': return h; case 'mm': return ('0' + c.minute).slice(-2); case 'm': return c.minute; case 'ss': return ('0' + c.second).slice(-2); case 's': return c.second; case 'l': return ('00' + c.millisec).slice(-3); case 'z': return c.timezone === null ? f.defaultTimezone : c.timezone; case 't': case 'tt': if (f.ampm) { if (b.length == 1) { e = e.charAt(0) } return b.charAt(0) === 'T' ? e.toUpperCase() : e.toLowerCase() } return ''; default: return b.replace(/\'/g, "") || "'" } }); g = d.trim(g); return g }; d.datepicker._base_selectDate = d.datepicker._selectDate; d.datepicker._selectDate = function (b, a) { var c = this._getInst(d(b)[0]), f = this._get(c, 'timepicker'); if (f) { f._limitMinMaxDateTime(c, true); c.inline = c.stay_open = true; this._base_selectDate(b, a); c.inline = c.stay_open = false; this._notifyChange(c); this._updateDatepicker(c) } else { this._base_selectDate(b, a) } }; d.datepicker._base_updateDatepicker = d.datepicker._updateDatepicker; d.datepicker._updateDatepicker = function (b) { var a = b.input[0]; if (d.datepicker._curInst && d.datepicker._curInst != b && d.datepicker._datepickerShowing && d.datepicker._lastInput != a) { return } if (typeof (b.stay_open) !== 'boolean' || b.stay_open === false) { this._base_updateDatepicker(b); var c = this._get(b, 'timepicker'); if (c) { c._addTimePicker(b); if (c._defaults.useLocalTimezone) { var f = new Date(b.selectedYear, b.selectedMonth, b.selectedDay, 12); x(c, f); c._onTimeChange() } } } }; d.datepicker._base_doKeyPress = d.datepicker._doKeyPress; d.datepicker._doKeyPress = function (b) { var a = d.datepicker._getInst(b.target), c = d.datepicker._get(a, 'timepicker'); if (c) { if (d.datepicker._get(a, 'constrainInput')) { var f = c._defaults.ampm, g = d.datepicker._possibleChars(d.datepicker._get(a, 'dateFormat')), e = c._defaults.timeFormat.toString().replace(/[hms]/g, '').replace(/TT/g, f ? 'APM' : '').replace(/Tt/g, f ? 'AaPpMm' : '').replace(/tT/g, f ? 'AaPpMm' : '').replace(/T/g, f ? 'AP' : '').replace(/tt/g, f ? 'apm' : '').replace(/t/g, f ? 'ap' : '') + " " + c._defaults.separator + c._defaults.timeSuffix + (c._defaults.showTimezone ? c._defaults.timezoneList.join('') : '') + (c._defaults.amNames.join('')) + (c._defaults.pmNames.join('')) + g, h = String.fromCharCode(b.charCode === undefined ? b.keyCode : b.charCode); return b.ctrlKey || (h < ' ' || !g || e.indexOf(h) > -1) } } return d.datepicker._base_doKeyPress(b) }; d.datepicker._base_updateAlternate = d.datepicker._updateAlternate; d.datepicker._updateAlternate = function (b) { var a = this._get(b, 'timepicker'); if (a) { var c = a._defaults.altField; if (c) { var f = a._defaults.altFormat || a._defaults.dateFormat, g = this._getDate(b), e = d.datepicker._getFormatConfig(b), h = '', m = a._defaults.altSeparator ? a._defaults.altSeparator : a._defaults.separator, i = a._defaults.altTimeSuffix ? a._defaults.altTimeSuffix : a._defaults.timeSuffix, l = a._defaults.altTimeFormat !== undefined ? a._defaults.altTimeFormat : a._defaults.timeFormat; h += d.datepicker.formatTime(l, a, a._defaults) + i; if (!a._defaults.timeOnly && !a._defaults.altFieldTimeOnly) { if (a._defaults.altFormat) h = d.datepicker.formatDate(a._defaults.altFormat, (g === null ? new Date() : g), e) + m + h; else h = a.formattedDate + m + h } d(c).val(h) } } else { d.datepicker._base_updateAlternate(b) } }; d.datepicker._base_doKeyUp = d.datepicker._doKeyUp; d.datepicker._doKeyUp = function (b) { var a = d.datepicker._getInst(b.target), c = d.datepicker._get(a, 'timepicker'); if (c) { if (c._defaults.timeOnly && (a.input.val() != a.lastVal)) { try { d.datepicker._updateDatepicker(a) } catch (err) { d.datepicker.log(err) } } } return d.datepicker._base_doKeyUp(b) }; d.datepicker._base_gotoToday = d.datepicker._gotoToday; d.datepicker._gotoToday = function (b) { var a = this._getInst(d(b)[0]), c = a.dpDiv; this._base_gotoToday(b); var f = this._get(a, 'timepicker'); x(f); var g = new Date(); this._setTime(a, g); d('.ui-datepicker-today', c).click() }; d.datepicker._disableTimepickerDatepicker = function (b) { var a = this._getInst(b); if (!a) { return } var c = this._get(a, 'timepicker'); d(b).datepicker('getDate'); if (c) { c._defaults.showTimepicker = false; c._updateDateTime(a) } }; d.datepicker._enableTimepickerDatepicker = function (b) { var a = this._getInst(b); if (!a) { return } var c = this._get(a, 'timepicker'); d(b).datepicker('getDate'); if (c) { c._defaults.showTimepicker = true; c._addTimePicker(a); c._updateDateTime(a) } }; d.datepicker._setTime = function (b, a) { var c = this._get(b, 'timepicker'); if (c) { var f = c._defaults; c.hour = a ? a.getHours() : f.hour; c.minute = a ? a.getMinutes() : f.minute; c.second = a ? a.getSeconds() : f.second; c.millisec = a ? a.getMilliseconds() : f.millisec; c._limitMinMaxDateTime(b, true); c._onTimeChange(); c._updateDateTime(b) } }; d.datepicker._setTimeDatepicker = function (b, a, c) { var f = this._getInst(b); if (!f) { return } var g = this._get(f, 'timepicker'); if (g) { this._setDateFromField(f); var e; if (a) { if (typeof a == "string") { g._parseTime(a, c); e = new Date(); e.setHours(g.hour, g.minute, g.second, g.millisec) } else { e = new Date(a.getTime()) } if (e.toString() == 'Invalid Date') { e = undefined } this._setTime(f, e) } } }; d.datepicker._base_setDateDatepicker = d.datepicker._setDateDatepicker; d.datepicker._setDateDatepicker = function (b, a) { var c = this._getInst(b); if (!c) { return } var f = (a instanceof Date) ? new Date(a.getTime()) : a; this._updateDatepicker(c); this._base_setDateDatepicker.apply(this, arguments); this._setTimeDatepicker(b, f, true) }; d.datepicker._base_getDateDatepicker = d.datepicker._getDateDatepicker; d.datepicker._getDateDatepicker = function (b, a) { var c = this._getInst(b); if (!c) { return } var f = this._get(c, 'timepicker'); if (f) { if (c.lastVal === undefined) { this._setDateFromField(c, a) } var g = this._getDate(c); if (g && f._parseTime(d(b).val(), f.timeOnly)) { g.setHours(f.hour, f.minute, f.second, f.millisec) } return g } return this._base_getDateDatepicker(b, a) }; d.datepicker._base_parseDate = d.datepicker.parseDate; d.datepicker.parseDate = function (b, a, c) { var f; try { f = this._base_parseDate(b, a, c) } catch (err) { f = this._base_parseDate(b, a.substring(0, a.length - (err.length - err.indexOf(':') - 2)), c) } return f }; d.datepicker._base_formatDate = d.datepicker._formatDate; d.datepicker._formatDate = function (b, a, c, f) { var g = this._get(b, 'timepicker'); if (g) { g._updateDateTime(b); return g.$input.val() } return this._base_formatDate(b) }; d.datepicker._base_optionDatepicker = d.datepicker._optionDatepicker; d.datepicker._optionDatepicker = function (b, a, c) { var f = this._getInst(b), g; if (!f) { return null } var e = this._get(f, 'timepicker'); if (e) { var h = null, m = null, i = null, l = e._defaults.evnts, j = {}, k; if (typeof a == 'string') { if (a === 'minDate' || a === 'minDateTime') { h = c } else if (a === 'maxDate' || a === 'maxDateTime') { m = c } else if (a === 'onSelect') { i = c } else if (l.hasOwnProperty(a)) { if (typeof (c) === 'undefined') { return l[a] } j[a] = c; g = {} } } else if (typeof a == 'object') { if (a.minDate) { h = a.minDate } else if (a.minDateTime) { h = a.minDateTime } else if (a.maxDate) { m = a.maxDate } else if (a.maxDateTime) { m = a.maxDateTime } for (k in l) { if (l.hasOwnProperty(k) && a[k]) { j[k] = a[k] } } } for (k in j) { if (j.hasOwnProperty(k)) { l[k] = j[k]; if (!g) { g = d.extend({}, a) } delete g[k] } } if (g && I(g)) { return } if (h) { if (h === 0) { h = new Date() } else { h = new Date(h) } e._defaults.minDate = h; e._defaults.minDateTime = h } else if (m) { if (m === 0) { m = new Date() } else { m = new Date(m) } e._defaults.maxDate = m; e._defaults.maxDateTime = m } else if (i) { e._defaults.onSelect = i } } if (c === undefined) { return this._base_optionDatepicker.call(d.datepicker, b, a) } return this._base_optionDatepicker.call(d.datepicker, b, g || a, c) }; function I(b) { var a; for (a in b) { if (b.hasOwnProperty(b)) { return false } } return true } function z(b, a) { d.extend(b, a); for (var c in a) { if (a[c] === null || a[c] === undefined) { b[c] = a[c] } } return b } var J = function (b, a, c, f) { try { var g = f && f.separator ? f.separator : d.timepicker._defaults.separator, e = f && f.timeFormat ? f.timeFormat : d.timepicker._defaults.timeFormat, h = f && f.ampm ? f.ampm : d.timepicker._defaults.ampm, m = e.split(g), i = m.length, l = a.split(g), j = l.length; if (!h) { m = d.trim(e.replace(/t/gi, '')).split(g); i = m.length } if (j > 1) { return [l.splice(0, j - i).join(g), l.splice(0, i).join(g)] } } catch (err) { if (err.indexOf(":") >= 0) { var k = a.length - (err.length - err.indexOf(':') - 2), p = a.substring(k); return [d.trim(a.substring(0, k)), d.trim(a.substring(k))] } else { throw err; } } return [a, ''] }; var C = function (b, a, c, f, g) { var e; var h = J(b, c, f, g); e = d.datepicker._base_parseDate(b, h[0], f); if (h[1] !== '') { var m = h[1], i = d.datepicker.parseTime(a, m, g); if (i === null) { throw 'Wrong time format'; } return { date: e, timeObj: i } } else { return { date: e } } }; var x = function (b, a) { if (b && b.timezone_select) { b._defaults.useLocalTimezone = true; var c = typeof a !== 'undefined' ? a : new Date(); var f = d.timepicker.timeZoneOffsetString(c); if (b._defaults.timezoneIso8601) { f = f.substring(0, 3) + ':' + f.substring(3) } b.timezone_select.val(f) } }; d.timepicker = new y(); d.timepicker.timeZoneOffsetString = function (b) { var a = b.getTimezoneOffset() * -1, c = a % 60, f = (a - c) / 60; return (a >= 0 ? '+' : '-') + ('0' + (f * 101).toString()).substr(-2) + ('0' + (c * 101).toString()).substr(-2) }; d.timepicker.timeRange = function (b, a, c) { return d.timepicker.handleRange('timepicker', b, a, c) }; d.timepicker.dateTimeRange = function (b, a, c) { d.timepicker.dateRange(b, a, c, 'datetimepicker') }; d.timepicker.dateRange = function (b, a, c, f) { f = f || 'datepicker'; d.timepicker.handleRange(f, b, a, c) }; d.timepicker.handleRange = function (g, e, h, m) { d.fn[g].call(e, d.extend({ onClose: function (b, a) { i(this, h, b) }, onSelect: function (b) { l(this, h, 'minDate') } }, m, m.start)); d.fn[g].call(h, d.extend({ onClose: function (b, a) { i(this, e, b) }, onSelect: function (b) { l(this, e, 'maxDate') } }, m, m.end)); if (g != 'timepicker' && m.reformat) { d([e, h]).each(function () { var b = d(this)[g].call(d(this), 'option', 'dateFormat'), a = new Date(d(this).val()); if (d(this).val() && a) { d(this).val(d.datepicker.formatDate(b, a)) } }) } i(e, h, e.val()); function i(b, a, c) { if (a.val() && (new Date(e.val()) > new Date(h.val()))) { a.val(c) } } l(e, h, 'minDate'); l(h, e, 'maxDate'); function l(b, a, c) { if (!d(b).val()) { return } var f = d(b)[g].call(d(b), 'getDate'); if (f.getTime) { d(a)[g].call(d(a), 'option', c, f) } } return d([e.get(0), h.get(0)]) }; d.timepicker.version = "1.0.5" })(jQuery);